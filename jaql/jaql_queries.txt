1. Group the Tweets by language/geographical region and count the number in each group.
1) extract file as these format. {"id" : 1111,"geo" :null , "lang" : "en"} 
   extract command : ./extract_jaql.py /media/heeran/6653DFF74839CDCB/Tweets/1_2013/1_10.json lang_geo.json _id lang geo
   file name : "lang_geo.json"
2) make UDF  : readjson=fn(filename) read(file("/home/labfiles/tweeter/"+filename)); 
3) lang_geo = readjson("lang_geo.json");
4) count = lang_geo -> group by lang = $.lang into {lang : lang , num_lang : count ($)} 
5) count -> sort by [$.num_lang desc] -> write(jsonTextFile("file:///home/labfiles/tweeter/lang_count_result.json")); 

6) lang_geo -> group by geo = $.geo into { geo : geo , num_geo : count ($) }; // working
7) count -> sort by [$.num_lang desc] -> write(jsonTextFile("file:///home/labfiles/tweeter/lang_count_result.json"));  


lang_geo -> group by geo = $.geo into { geo.coordinates }; //working 



2. Find the top-k popular hashtags in the Tweets between date=x to date=y.

1) extract file as these format
[   {"entities_hashtags" : [ ], "id" : 1111 ,  "created_at" : "Fri Feb 01 17:12:46 +0000 2013"} ,
   {"created_at": "Thu Jan 10 17:52:00 +0000 2013", "id": 289429398753538051, "entities__hashtags": [{"indices": [0, 23], "text": "YoMeJuramentoConChavez"}, {"indices": [26, 49], "text":        "YoMeJuramentoConChavez"}, {"indices": [52, 75], "text": "YoMeJuramentoConChavez"}]}]
   extract command :  ./extract_jaql2.py /media/heeran/6653DFF74839CDCB/Tweets/1_2013/1_10.json hashtags_date.json id created_at entities__hashtags
   file name : "hashtags_date.json"
2) hashtags_date = readjson("hashtags_date.json");
3) keywords = hashtags_date -> filter count($.entities__hashtags[*].text) > 1; // filter the keyword which are exist.
   keywords = keywords -> expand $.entities__hashtags[*].text; //extract keyword only..
   keywords -> top 10;   
   keywords -> group by keyword = $ into { keyword , keyword_count : count($)} -> write(jsonTextFile("file:///home/labfiles/tweeter/keyword_result.json"));

* filter by date
$people
-> filter by $.birthdate < date(‘1990-01-01’)
-> aggregate count($);	 // count the older people


3. Order the users by their follower count.
1) extract file as these format
   {"user_followers_count" : 82, "user_id" :1111}
   extract command : ./extract_jaql2.py /media/heeran/6653DFF74839CDCB/Tweets/1_2013/1_10.json followers_count.json user__followers_count user__id
   file name : "followers_count.json"
2) followers_count = readjson("followers_count.json");
3) followers_count -> sort by [$.user__followers_count desc];


4. Find Tweets containing a group of keywords and hashtags and order then by the retweet count.
1) extract file as these format
   {"entities_hashtags" : [ ], "retweet_count" : 0, id : 1111}
   extract command : ./extract_jaql2.py /media/heeran/6653DFF74839CDCB/Tweets/1_2013/1_10.json keyword_retweetcount.json id entities__hashtags retweet_count
   file name : " keyword_retweetcount.json"
2) keyword_retweetcount = readjson("keyword_retweetcount.json");
3) keyword_retweetcount = keyword_retweetcount -> filter count($.entities__hashtags[*].text) > 1;//filter the keyword exited data
4) keyword_retweetcount = keyword_retweetcount -> transform { id : $.id , text : $.entities__hashtags[*].text, retweet_count : $.retweet_count};
5) keyword_retweetcount = keyword_retweetcount-> group by keyword = $ into { keyword , keyword_count : count ($) , $.id, $.retweet_count};
6) keyword_retweetcount = keyword_retweetcount-> sort by [$.retweet_count desc] ;
7) keyword_retweetcount-> write(jsonTextFile("file:///home/labfiles/tweeter/retweet_result.json")) ; re//transform 



